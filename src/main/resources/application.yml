spring:
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  sql:
    init:
      mode: never
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        show_sql: true
        format_sql: true
        use_sql_comments: true
        hbm2ddl:
          auto: update
        default_batch_fetch_size: 1000
  data:
    web:
      pageable:
        one-indexed-parameters: true
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-authentication-method: client_secret_post
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_SECRET}
            redirect-uri: http://localhost:8080/oauth2/code/kakao
            authorization-grant-type: authorization_code
            scope:
            client-name: Kakao
          naver:
            client-authentication-method: client_secret_post
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_SECRET}
            redirect-uri: ${NAVER_REDIRECT_URL}
            authorization-grant-type: authorization_code
            scope:
            client-name: Naver
          google:
            client-authentication-method: client_secret_post
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_SECRET}
            redirect-uri: ${GOOGLE_REDIRECT_URL}
            authorization-grant-type: authorization_code
            scope:
              - openid
            client-name: Google
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
  servlet:
    multipart:
      maxFileSize: 10MB # 파일 하나의 최대 크기
      maxRequestSize: 100MB  # 한 번에 최대 업로드 가능 용량
      # resolve-lazily 옵션 설명:
      # false (기본값): 파일 파싱이 컨트롤러 진입 전에 이뤄짐
      #   - 파일 크기 초과 등 예외가 Spring의 ExceptionHandler(@ExceptionHandler)에서 처리됨
      #   - 대부분의 서비스에서 사용하는 일반적인 방식
      # true: 파일 파싱을 컨트롤러 파라미터 바인딩 시점으로 미룸
      #   - 인증/권한 체크 전에 파일 파싱을 막고 싶을 때 사용(보안 목적)
      #   - 이 경우 파일 크기 초과 등 예외가 ExceptionHandler까지 도달하지 않고, 더 앞단(서블릿 컨테이너 등)에서 처리됨
      resolve-lazily: false
server:
  forward-headers-strategy: framework
  tomcat:
    max-swallow-size: 200MB
jwt:
  token:
    secretKey: ${JWT_SECRETKEY}
    expiration: # (만료) 시간 설정은 ms단위
      access: 14400000 # 4시간(보통 1시간~4시간 단위를 많이 채택)
      refresh: 604800000 # 7일
cloud:
  aws:
    s3:
      bucket: dnbn-bucket
      path:
        member: profile
        articlePhoto: article/photo
    region:
      static: ap-northeast-2
    stack:
      auto: false
    credentials:
      accessKey: ${AWS_ACCESS_KEY}
      secretKey: ${AWS_SECRET_KEY}